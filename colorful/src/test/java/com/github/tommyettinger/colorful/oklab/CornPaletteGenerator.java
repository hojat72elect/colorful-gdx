/*
 * Copyright (c) 2023 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.tommyettinger.colorful.oklab;

import com.badlogic.gdx.utils.FloatArray;
import com.badlogic.gdx.utils.IntArray;
import com.github.tommyettinger.colorful.internal.StringKit;

// example output
/*
//corn
{
0x00000000, 0x000000FF, 0xFFFFFFFF, 0x888888FF, 0x444444FF, 0xCCCCCCFF, 0x222222FF, 0xAAAAAAFF,
0x666666FF, 0xEEEEEEFF, 0x111111FF, 0x999999FF, 0x555555FF, 0xDDDDDDFF, 0x333333FF, 0xBBBBBBFF,
0x777777FF, 0x4416A6FF, 0x795AF6FF, 0x5833C5FF, 0xDF6F08FF, 0xC651A3FF, 0x992E7BFF, 0xE268BCFF,
0x55842DFF, 0x8FC666FF, 0x335D00FF, 0x6A9C42FF, 0xA7E17DFF, 0x577DBBFF, 0x001D49FF, 0x91BDFFFF,
0x365890FF, 0x6D95D6FF, 0x173465FF, 0xFEAFA1FF, 0x8B4D43FF, 0xD0877BFF, 0x612B24FF, 0xA56258FF,
0x9438C1FF, 0x6A0092FF, 0xAE4FDEFF, 0x70D7BFFF, 0x006C5BFF, 0x48AC96FF, 0x87F1D8FF, 0x208471FF,
0xF82E8AFF, 0x001686FF, 0x235AD7FF, 0x0032A4FF, 0x3773F5FF, 0xC59D19FF, 0xDFB536FF, 0xC697CCFF,
0x5E3A63FF, 0x9D72A2FF, 0x36183AFF, 0xE0B0E7FF, 0x764F7BFF, 0x00C04BFF, 0x16DA61FF, 0x932FFFFF,
0xEF5445FF, 0xBE2E24FF, 0x00B9E6FF, 0x13D4FFFF, 0xF346D6FF, 0xC115AAFF, 0x0022EEFF, 0xF3F7C8FF,
0x878A63FF, 0x2B2C0FFF, 0xC7CB9FFF, 0x636542FF, 0x9FA279FF, 0x404122FF, 0x5541A4FF, 0x8E7CEEFF,
0x341A74FF, 0x6956BFFF, 0x6D0D39FF, 0xB74A72FF, 0x89264EFF, 0xD46089FF, 0xAEE140FF, 0x86B500FF,
0xC6FC59FF, 0xC112F3FF, 0x17394AFF, 0xACDCF6FF, 0x4C7489FF, 0x85B2CAFF, 0x2A4E61FF, 0x618BA1FF,
0x3300B7FF, 0x422BD8FF, 0xF1A165FF, 0xC47A42FF, 0x99561FFF, 0xAE59BAFF, 0xF696FFFF, 0x83358EFF,
0xC86FD4FF, 0x5A0D64FF, 0x66C884FF, 0x005F2BFF, 0x419E60FF, 0x7EE29CFF, 0x19773FFF, 0xE72057FF,
0x347CD2FF, 0x0A56A4FF, 0x4994EEFF, 0x77525AFF, 0xB88C95FF, 0x4F3037FF, 0xFFCDD7FF, 0x8F676FFF,
0x270F15FF, 0xD3A4AEFF, 0x4FF737FF, 0x1ACA00FF, 0x7E37D5FF, 0x5900A4FF, 0x9550F3FF, 0x46F5F5FF,
0x00C9CAFF, 0xE040A1FF, 0xB01279FF, 0xE7E786FF, 0x7D7C27FF, 0xBCBC60FF, 0xFFFF9CFF, 0x95943DFF,
0xA79BE5FF, 0x473B74FF, 0x8074B8FF, 0x251948FF, 0xBFB3FFFF, 0x5C518EFF, 0xD66263FF, 0xA73E40FF,
0xF27877FF, 0x791922FF, 0xDD4AECFF, 0xAF1EBEFF, 0xFA63FFFF, 0x658F7DFF, 0x0C2E22FF, 0xA2D1BCFF,
0x426859FF, 0x7BA694FF, 0x224437FF, 0xBBECD6FF, 0x707CFFFF, 0x231386FF, 0x5056D6FF, 0x332FA5FF,
0xE49200FF, 0xFFAA2EFF, 0x9E5187FF, 0xE58CC8FF, 0x742F61FF, 0xB9679FFF, 0x490B3AFF, 0x277800FF,
0x61B946FF, 0x9FFF83FF, 0x3C8F1FFF, 0x78D45DFF, 0xAE1DFFFF, 0x25739EFF, 0x61B3E3FF, 0x004E74FF,
0x3C8BB8FF, 0x2C1CECFF, 0xD3AA85FF, 0x68482BFF, 0xA88260FF, 0x41270BFF, 0xEDC29BFF, 0x805E3FFF,
0x6F39A3FF, 0xAE74EDFF, 0x491074FF, 0x874FBFFF, 0x13CCA1FF, 0x3BE6B9FF, 0xD0376FFF, 0x0093FFFF,
0xDDD737FF, 0xF8F353FF, 0x9A91AEFF, 0x3B3449FF, 0xDCD3F3FF, 0x746C87FF, 0x171121FF, 0xB2AAC8FF,
0x504961FF, 0x6E35E6FF, 0x834EFFFF, 0xC75426FF, 0xE46B3CFF, 0xCD48B8FF, 0x9E208DFF, 0xEA5FD3FF,
0xC0EEA8FF, 0x5C8148FF, 0x97C181FF, 0x3B5B28FF, 0x72995DFF, 0x1B3700FF, 0x2F3B87FF, 0x6277CFFF,
0x131456FF, 0x4151A2FF, 0x788EECFF, 0x4B1223FF, 0x914958FF, 0xD88393FF, 0x652736FF, 0xAC5E6EFF,
0x79D500FF, 0x8FF02BFF, 0xC752FFFF, 0x9B27CFFF, 0x73D3D6FF, 0x006A6EFF, 0x4EA9ADFF, 0x8CEEF1FF,
0x278285FF, 0xFF1999FF, 0x3052EBFF, 0x1827B8FF, 0xC69A45FF, 0x9C7420FF, 0xE0B35CFF, 0x87579DFF,
0xC993E3FF, 0x5F3473FF, 0x9F6CB6FF, 0x391149FF, 0xE4ABFEFF, 0x05BD68FF, 0x36D87EFF, 0xA30B2BFF,
0xF2535FFF, 0xC02B3EFF, 0x19B5FDFF, 0xF935E5FF, 0x1A00FDFF, 0x534C42FF, 0xFAF1E1FF, 0x8E867AFF,
}
//corn3
{
0x00000000, 0x000000FF, 0xFFFFFFFF, 0x888888FF, 0x444444FF, 0xCCCCCCFF, 0x222222FF, 0xAAAAAAFF,
0x666666FF, 0xEEEEEEFF, 0x111111FF, 0x999999FF, 0x555555FF, 0xDDDDDDFF, 0x333333FF, 0xBBBBBBFF,
0x777777FF, 0x4416A6FF, 0x795AF6FF, 0x5833C5FF, 0xDF6F08FF, 0xC651A3FF, 0x992E7BFF, 0xE268BCFF,
0xB44493FF, 0x55842DFF, 0x8FC666FF, 0x335D00FF, 0x6A9C42FF, 0xA7E17DFF, 0x47751FFF, 0x577DBBFF,
0x001D49FF, 0x91BDFFFF, 0x365890FF, 0x6D95D6FF, 0x173465FF, 0xFEAFA1FF, 0x8B4D43FF, 0xD0877BFF,
0x612B24FF, 0xA56258FF, 0xEC9F92FF, 0x9438C1FF, 0x6A0092FF, 0xAE4FDEFF, 0x70D7BFFF, 0x006C5BFF,
0x48AC96FF, 0x87F1D8FF, 0x208471FF, 0x60C6AFFF, 0xF82E8AFF, 0x001686FF, 0x235AD7FF, 0x0032A4FF,
0x3773F5FF, 0xC59D19FF, 0xDFB536FF, 0xC697CCFF, 0x5E3A63FF, 0x9D72A2FF, 0x36183AFF, 0xE0B0E7FF,
0x764F7BFF, 0x00C04BFF, 0x16DA61FF, 0x932FFFFF, 0x8416F7FF, 0xEF5445FF, 0xBE2E24FF, 0xDC4638FF,
0x00B9E6FF, 0x13D4FFFF, 0xF346D6FF, 0xC115AAFF, 0x0022EEFF, 0xF3F7C8FF, 0x878A63FF, 0x2B2C0FFF,
0xC7CB9FFF, 0x636542FF, 0x9FA279FF, 0x5541A4FF, 0x8E7CEEFF, 0x341A74FF, 0x6956BFFF, 0x483292FF,
0x6D0D39FF, 0xB74A72FF, 0x89264EFF, 0xD46089FF, 0xAEE140FF, 0x86B500FF, 0xC6FC59FF, 0x9ECF2DFF,
0xC112F3FF, 0x17394AFF, 0xACDCF6FF, 0x4C7489FF, 0x85B2CAFF, 0x2A4E61FF, 0x618BA1FF, 0x3300B7FF,
0x422BD8FF, 0xF1A165FF, 0xC47A42FF, 0x99561FFF, 0xE09257FF, 0xAE59BAFF, 0xF696FFFF, 0x83358EFF,
0xC86FD4FF, 0x5A0D64FF, 0x9D4BA9FF, 0x66C884FF, 0x005F2BFF, 0x419E60FF, 0x7EE29CFF, 0x19773FFF,
0x58B876FF, 0xE72057FF, 0x347CD2FF, 0x0A56A4FF, 0x4994EEFF, 0x266DC0FF, 0x77525AFF, 0xB88C95FF,
0x4F3037FF, 0xFFCDD7FF, 0x8F676FFF, 0x270F15FF, 0x4FF737FF, 0x1ACA00FF, 0x7E37D5FF, 0x5900A4FF,
0x9550F3FF, 0x7028C3FF, 0x46F5F5FF, 0x00C9CAFF, 0xE040A1FF, 0xB01279FF, 0xFE58BAFF, 0xE7E786FF,
0x7D7C27FF, 0xBCBC60FF, 0xFFFF9CFF, 0x95943DFF, 0xD6D678FF, 0xA79BE5FF, 0x473B74FF, 0x8074B8FF,
0x251948FF, 0xBFB3FFFF, 0x5C518EFF, 0xD66263FF, 0xA73E40FF, 0xF27877FF, 0x791922FF, 0xC45455FF,
0xDD4AECFF, 0xAF1EBEFF, 0xFA63FFFF, 0xCB3BDBFF, 0x658F7DFF, 0x0C2E22FF, 0xA2D1BCFF, 0x426859FF,
0x7BA694FF, 0x224437FF, 0x707CFFFF, 0x231386FF, 0x5056D6FF, 0x332FA5FF, 0x636EF4FF, 0xE49200FF,
0xFFAA2EFF, 0x9E5187FF, 0xE58CC8FF, 0x742F61FF, 0xB9679FFF, 0x490B3AFF, 0xFFA4E3FF, 0x277800FF,
0x61B946FF, 0x9FFF83FF, 0x3C8F1FFF, 0x78D45DFF, 0xAE1DFFFF, 0x25739EFF, 0x61B3E3FF, 0x004E74FF,
0x3C8BB8FF, 0x78CDFFFF, 0x15658EFF, 0x2C1CECFF, 0xD3AA85FF, 0x68482BFF, 0xA88260FF, 0x41270BFF,
0xEDC29BFF, 0x805E3FFF, 0x6F39A3FF, 0xAE74EDFF, 0x491074FF, 0x874FBFFF, 0xC88BFFFF, 0x13CCA1FF,
0x3BE6B9FF, 0x00BB91FF, 0xD0376FFF, 0xEE4F86FF, 0x0093FFFF, 0xDDD737FF, 0xF8F353FF, 0x9A91AEFF,
0x3B3449FF, 0xDCD3F3FF, 0x746C87FF, 0x171121FF, 0xB2AAC8FF, 0x6E35E6FF, 0x834EFFFF, 0x6022D2FF,
0xC75426FF, 0xE46B3CFF, 0xB54617FF, 0xCD48B8FF, 0x9E208DFF, 0xEA5FD3FF, 0xC0EEA8FF, 0x5C8148FF,
0x97C181FF, 0x3B5B28FF, 0x72995DFF, 0x1B3700FF, 0x2F3B87FF, 0x6277CFFF, 0x131456FF, 0x4151A2FF,
0x788EECFF, 0x232D74FF, 0x4B1223FF, 0x914958FF, 0xD88393FF, 0x652736FF, 0xAC5E6EFF, 0xF49AABFF,
0x79D500FF, 0x8FF02BFF, 0xC752FFFF, 0x9B27CFFF, 0xB542ECFF, 0x73D3D6FF, 0x006A6EFF, 0x4EA9ADFF,
}

//corn4
{
0x00000000, 0x000000FF, 0xFFFFFFFF, 0x858585FF, 0x434343FF, 0xCECECEFF, 0x242424FF, 0xA8A8A8FF,
0x636363FF, 0xF5F5F4FF, 0x141414FF, 0x969696FF, 0x535353FF, 0xE2E2E2FF, 0x343434FF, 0xBBBBBBFF,
0x747474FF, 0x4616A3FF, 0x7C5AF2FF, 0x5A33C2FF, 0xE16E00FF, 0xC850A0FF, 0x9A2C78FF, 0xE467B9FF,
0xB74391FF, 0x598329FF, 0x94C563FF, 0x385C00FF, 0x6E9B3EFF, 0xACE07AFF, 0x4C741AFF, 0x5B7CB8FF,
0x081D47FF, 0x96BCFFFF, 0x3A588EFF, 0x7194D3FF, 0x1B3463FF, 0xFFAE9EFF, 0x8D4C41FF, 0xD38678FF,
0x632A22FF, 0xA86155FF, 0xEF9D8FFF, 0x9637BEFF, 0x6C008FFF, 0xB04EDBFF, 0x76D6BCFF, 0x076C58FF,
0x4FAB93FF, 0x8DF0D5FF, 0x29836EFF, 0x66C5ACFF, 0xFA2B87FF, 0x001783FF, 0x295AD4FF, 0x0932A2FF,
0x3C72F2FF, 0xC89B0EFF, 0xE2B331FF, 0xC996C9FF, 0x603960FF, 0x9F71A0FF, 0x371739FF, 0xE4AFE4FF,
0x784E78FF, 0x00BF48FF, 0x2AD95DFF, 0x952FFFFF, 0x8617F4FF, 0xF15342FF, 0xC02B20FF, 0xDE4435FF,
0x00B9E3FF, 0x29D3FFFF, 0xF545D3FF, 0xC312A7FF, 0x0024EBFF, 0xF7F6C5FF, 0x8B8960FF, 0x2D2B0CFF,
0xCBC99CFF, 0x66643FFF, 0xA3A176FF, 0x5740A2FF, 0x917BEBFF, 0x351A72FF, 0x6C56BCFF, 0x4A328FFF,
0x6F0937FF, 0xB9496FFF, 0x8B244BFF, 0xD65F86FF, 0xB2E03BFF, 0x8BB400FF, 0xCBFA55FF, 0xA2CE27FF,
0xC211F0FF, 0x1B3948FF, 0xB1DBF3FF, 0x507386FF, 0x8AB2C7FF, 0x2E4E5FFF, 0x658A9EFF, 0x3400B4FF,
0x442BD5FF, 0xF4A061FF, 0xC7793EFF, 0x9C551AFF, 0xE39154FF, 0xB158B7FF, 0xF895FFFF, 0x85348CFF,
0xCA6ED1FF, 0x5B0C62FF, 0x9F4AA6FF, 0x6CC781FF, 0x005E28FF, 0x489D5DFF, 0x84E198FF, 0x23763CFF,
0x5EB773FF, 0xE91C55FF, 0x3A7CCFFF, 0x1655A1FF, 0x4F93EAFF, 0x2D6DBDFF, 0x7A5158FF, 0xBB8B93FF,
0x512F35FF, 0xFFCCD4FF, 0x91666DFF, 0x280E14FF, 0x58F631FF, 0x2BC900FF, 0x8037D2FF, 0x5B00A2FF,
0x984FF0FF, 0x7227C0FF, 0x51F4F2FF, 0x18C8C7FF, 0xE23E9EFF, 0xB20E77FF, 0xFF57B7FF, 0xEBE583FF,
0x817B22FF, 0xC0BB5DFF, 0xFFFE99FF, 0x989339FF, 0xDAD574FF, 0xAA9AE2FF, 0x493B71FF, 0x8374B5FF,
0x271846FF, 0xC2B2FCFF, 0x5E508BFF, 0xD96160FF, 0xA93C3EFF, 0xF57775FF, 0x7B171FFF, 0xC65252FF,
0xDF49E9FF, 0xB11DBCFF, 0xFC62FFFF, 0xCD3AD8FF, 0x6A8E7BFF, 0x112D20FF, 0xA6D0B9FF, 0x466856FF,
0x7FA591FF, 0x264435FF, 0x737CFFFF, 0x251484FF, 0x5356D3FF, 0x3530A3FF, 0x676DF0FF, 0xE79000FF,
0xFFA928FF, 0xA15084FF, 0xE88BC5FF, 0x762E5EFF, 0xBB669DFF, 0x4A0939FF, 0xFFA3E0FF, 0x2E7700FF,
0x67B842FF, 0xA5FF7FFF, 0x428E1AFF, 0x7ED359FF, 0xAF1DFFFF, 0x2C739BFF, 0x66B2E0FF, 0x004E72FF,
0x428AB5FF, 0x7ECCFCFF, 0x1E658BFF, 0x2F1EE9FF, 0xD6A982FF, 0x6A4728FF, 0xAB815DFF, 0x432606FF,
0xF0C198FF, 0x835D3CFF, 0x7138A1FF, 0xB173EAFF, 0x4A1072FF, 0x894EBCFF, 0xCB8BFFFF, 0x27CB9EFF,
0x46E5B6FF, 0x00BA8EFF, 0xD2356CFF, 0xF04D83FF, 0x0092FFFF, 0xE1D632FF, 0xFCF14FFF, 0x9D90ABFF,
0x3D3447FF, 0xE0D2F0FF, 0x776C84FF, 0x18111FFF, 0xB6A9C5FF, 0x7035E3FF, 0x854EFFFF, 0x6223CFFF,
0xC95221FF, 0xE66938FF, 0xB74510FF, 0xCF47B5FF, 0xA01E8BFF, 0xEC5ED0FF, 0xC4EDA5FF, 0x608045FF,
0x9BC07DFF, 0x3E5B25FF, 0x76985AFF, 0x1E3600FF, 0x323B84FF, 0x6676CDFF, 0x151454FF, 0x44509FFF,
0x7B8EE9FF, 0x262D72FF, 0x4D1021FF, 0x934856FF, 0xDA8190FF, 0x672534FF, 0xAE5D6BFF, 0xF799A8FF,
0x7ED400FF, 0x95EF24FF, 0xC951FCFF, 0x9D26CCFF, 0xB741E9FF, 0x79D2D3FF, 0x146A6BFF, 0x54A9AAFF,
}

//corn5
{
0x00000000, 0x000000FF, 0xFFFFFFFF, 0x858585FF, 0x434343FF, 0xCECECEFF, 0x242424FF, 0xA8A8A8FF,
0x636363FF, 0xF5F5F4FF, 0x141414FF, 0x969696FF, 0x535353FF, 0xE2E2E2FF, 0x343434FF, 0xBBBBBBFF,
0x747474FF, 0x8614F5FF, 0xF25241FF, 0xC12A1FFF, 0xDF4334FF, 0x00B9E3FF, 0x26D3FFFF, 0xF544D4FF,
0xC40FA7FF, 0xF7F6C4FF, 0x8B8960FF, 0x2D2B0BFF, 0xCBCA9BFF, 0x66643FFF, 0xA3A176FF, 0x5840A2FF,
0x917BECFF, 0x351A73FF, 0x6C55BDFF, 0x4A3290FF, 0x6F0737FF, 0xBA486FFF, 0x8B244BFF, 0xD75E86FF,
0xB2E039FF, 0x8BB400FF, 0xCBFA53FF, 0xA2CE25FF, 0xC30CF1FF, 0x1B3948FF, 0xB0DBF3FF, 0x507386FF,
0x89B2C8FF, 0x2E4E5FFF, 0x658A9FFF, 0x3500B5FF, 0x442BD6FF, 0xF49F61FF, 0x823F00FF, 0xC7793DFF,
0x9C5519FF, 0xE39153FF, 0xB158B8FF, 0xF995FFFF, 0x86348CFF, 0xCB6DD1FF, 0x5B0B62FF, 0xA049A6FF,
0x6CC781FF, 0x005E28FF, 0x479E5DFF, 0x84E198FF, 0x22763CFF, 0x5EB773FF, 0xEA1A54FF, 0x3A7CD0FF,
0x1555A2FF, 0x4E93EBFF, 0x2C6DBEFF, 0x7A5158FF, 0xBC8B93FF, 0x522F35FF, 0xFFCCD4FF, 0x92666DFF,
0x280E14FF, 0x57F62FFF, 0x8037D3FF, 0x5B00A2FF, 0x984FF1FF, 0x7227C1FF, 0x4FF4F2FF, 0x14C8C7FF,
0xE33D9EFF, 0xB30B77FF, 0xFF56B7FF, 0xEBE582FF, 0x817B21FF, 0xC0BB5CFF, 0x989338FF, 0xDAD573FF,
0xAA9AE2FF, 0x493B72FF, 0x8373B5FF, 0x271847FF, 0xC2B2FDFF, 0x5F508CFF, 0xD9615FFF, 0xAA3C3EFF,
0xF57774FF, 0x7B161FFF, 0xC65252FF, 0xDF48EAFF, 0xB11BBCFF, 0xCE39D8FF, 0x698E7AFF, 0x112D20FF,
0xA6D0B9FF, 0x466856FF, 0x7FA691FF, 0x264435FF, 0x737CFFFF, 0x251384FF, 0x5355D4FF, 0x352FA4FF,
0x676DF1FF, 0xE79000FF, 0xFFA925FF, 0xA15084FF, 0xE88BC6FF, 0x762E5EFF, 0xBC669DFF, 0x4B0839FF,
0xFFA3E0FF, 0x66B941FF, 0xA4FF7EFF, 0x428F18FF, 0x7DD358FF, 0xB01BFFFF, 0x2B739BFF, 0x66B2E1FF,
0x004E72FF, 0x428AB5FF, 0x7DCCFDFF, 0x1D658CFF, 0x2F1DEAFF, 0xD6A981FF, 0x6A4728FF, 0xAB815DFF,
0x432505FF, 0xF0C198FF, 0x835D3CFF, 0x7138A1FF, 0xB173EAFF, 0x4A0F73FF, 0x894EBDFF, 0x25CB9EFF,
0x44E5B5FF, 0x00BA8EFF, 0xFF5B91FF, 0xD2346CFF, 0xF14D83FF, 0x0092FFFF, 0xE1D62FFF, 0xFCF14DFF,
0x9D90ABFF, 0x3D3447FF, 0xE0D2F0FF, 0x776B84FF, 0x18111FFF, 0xB6A9C5FF, 0x7035E4FF, 0x854DFFFF,
0x6222D0FF, 0xC95220FF, 0xE76937FF, 0xB8440EFF, 0xD046B6FF, 0xA01D8BFF, 0xED5ED0FF, 0xC4EDA4FF,
0x608045FF, 0x9BC17DFF, 0x3E5B24FF, 0x769859FF, 0x1E3600FF, 0x323B85FF, 0x6576CDFF, 0x151454FF,
0x44509FFF, 0x7B8EE9FF, 0x262C72FF, 0x4D1021FF, 0x944756FF, 0xDB8190FF, 0x682534FF, 0xAF5D6BFF,
0xF799A8FF, 0x95EF20FF, 0xCA50FDFF, 0x9D25CDFF, 0xB840EAFF, 0x79D2D3FF, 0x136A6BFF, 0x53A9AAFF,
0x91EDEEFF, 0x2E8183FF, 0x6AC2C3FF, 0xFF0F97FF, 0x3452E9FF, 0x1C28B6FF, 0xC99940FF, 0x9F7319FF,
0xE4B257FF, 0xB98A32FF, 0x8A569BFF, 0xCC91E0FF, 0x623371FF, 0xA26BB4FF, 0x3A1047FF, 0xE7AAFCFF,
0x1EBC64FF, 0x3FD77BFF, 0x00AD57FF, 0xA50028FF, 0xF5505CFF, 0xC2273BFF, 0x26B4FBFF, 0xFC32E3FF,
0x1E00FBFF, 0x554B3FFF, 0xFEEFDEFF, 0x918577FF, 0x30281EFF, 0xD3C5B5FF, 0x6B6053FF, 0x6036AFFF,
0x9B72FBFF, 0x3D067FFF, 0x764DCCFF, 0x52279DFF, 0xF064A5FF, 0xC03F7EFF, 0x911759FF, 0xDD5595FF,
0xB9DC60FF, 0x92B13AFF, 0xD3F778FF, 0x6E890AFF, 0xAACB52FF, 0x7D95C5FF, 0x253558FF, 0x596E9AFF,
0x06102BFF, 0x93ACDEFF, 0x384A71FF, 0x5017E6FF, 0xB15E44FF, 0xFA9B7CFF, 0x853B24FF, 0xCC7458FF,
}
 */
public class CornPaletteGenerator {
    private static final int limit = 256;
    private static final IntArray rgba = new IntArray(limit);
    private static final FloatArray labs = new FloatArray(limit);
    private static int idx = 1;
    private static final int SEED = 123;
    private static void addL(int rgba8888){
        float oklab = ColorTools.oklab((rgba8888 >>> 8 & 255) / 255f, 0.5f, 0.5f, 1f);
        rgba.add(ColorTools.toRGBA8888(oklab));
        labs.add(oklab);
    }
    private static void add(float oklab){
        if(oklab == 0f) return;
        float L = ColorTools.channelL(oklab), A = ColorTools.channelA(oklab), B = ColorTools.channelB(oklab);
        int ctr = 0;
        for (int hi = 0; hi < 10; hi++) {
            if(rgba.size >= limit) break;
            oklab = ColorTools.oklab((L + 0.6180339887498949f * hi) % 1f, A, B, 1f);
            if (!ColorTools.inGamut(oklab))
                continue;
            int reg = ColorTools.toRGBA8888(oklab);
            rgba.add(reg);
            labs.add(oklab);
            if(++ctr >= 6) break;
        }
        if(ctr != 0)
            System.out.print(ctr + " ");
    }
    public static void main(String[] args) {
//        System.out.printf("%08X, %1.4f, %08X\n", 0xFF0000FF, ColorTools.chroma(ColorTools.fromRGBA8888(0xFF0000FF)), ColorTools.toRGBA8888(ColorTools.maximizeSaturation(ColorTools.fromRGBA8888(0xFF0000FF))));
//        System.out.printf("%08X, %1.4f, %08X\n", 0x00FF00FF, ColorTools.chroma(ColorTools.fromRGBA8888(0x00FF00FF)), ColorTools.toRGBA8888(ColorTools.maximizeSaturation(ColorTools.fromRGBA8888(0x00FF00FF))));
//        System.out.printf("%08X, %1.4f, %08X\n", 0x0000FFFF, ColorTools.chroma(ColorTools.fromRGBA8888(0x0000FFFF)), ColorTools.toRGBA8888(ColorTools.maximizeSaturation(ColorTools.fromRGBA8888(0x0000FFFF))));
//        System.out.printf("%08X, %1.4f, %08X\n", 0xFFFF00FF, ColorTools.chroma(ColorTools.fromRGBA8888(0xFFFF00FF)), ColorTools.toRGBA8888(ColorTools.maximizeSaturation(ColorTools.fromRGBA8888(0xFFFF00FF))));
//        System.out.printf("%08X, %1.4f, %08X\n", 0x00FFFFFF, ColorTools.chroma(ColorTools.fromRGBA8888(0x00FFFFFF)), ColorTools.toRGBA8888(ColorTools.maximizeSaturation(ColorTools.fromRGBA8888(0x00FFFFFF))));
//        System.out.printf("%08X, %1.4f, %08X\n", 0xFF00FFFF, ColorTools.chroma(ColorTools.fromRGBA8888(0xFF00FFFF)), ColorTools.toRGBA8888(ColorTools.maximizeSaturation(ColorTools.fromRGBA8888(0xFF00FFFF))));

        rgba.add(0);
//        add(0x010101FF);
//        add(0xFEFEFEFF);
//        add(0x777777FF);
//        add(0x555555FF);
//        add(0xAAAAAAFF);
//        add(0x333333FF);
//        add(0xE0E0E0FF);
//        add(0xC8C8C8FF);

        addL(0x000000FF);
        addL(0xFFFFFFFF);
        addL(0x888888FF);
        addL(0x444444FF);
        addL(0xCCCCCCFF);
        addL(0x222222FF);
        addL(0xAAAAAAFF);
        addL(0x666666FF);
        addL(0xEEEEEEFF);
        addL(0x111111FF);
        addL(0x999999FF);
        addL(0x555555FF);
        addL(0xDDDDDDFF);
        addL(0x333333FF);
        addL(0xBBBBBBFF);
        addL(0x777777FF);

//        int idx = 1, initial = rgba.size;
        while (rgba.size < limit) {
//            add(ColorTools.randomColor(random));
            add(oklabR2Color(idx));
            if(++idx % 10000 == 0)
                System.out.println(idx + " tries, " + rgba.size + " placed");
//            ++idx;
//            for (int i = initial; i < 32 && rgba.size < limit; i++) {
//                float color = gaussianColor(idx++, (1.0 - i * i * i * 0x1p-16));
//                if (ColorTools.inGamut(color)) {
//                    rgba.add(ColorTools.toRGBA8888(color));
//                }
//            }
        }
        System.out.println(idx + " attempts.");
        StringBuilder sb = new StringBuilder(12 * rgba.size + 35).append("{\n");
        for (int i = 0; i < rgba.size; i++) {
            StringKit.appendHex(sb.append("0x"), rgba.get(i)).append(", ");
            if(7 == (i & 7)) sb.append('\n');
        }
        System.out.println(sb.append('}'));

        System.out.println();
        for (int i = 0; i < labs.size; i++) {
            float c = labs.get(i);
            System.out.printf("L=%f,A=%f,B=%f,RGBA=%08X ",
                    ColorTools.channelL(c), ColorTools.channelA(c), ColorTools.channelB(c), ColorTools.toRGBA8888(c));
            if(7 == (i & 7)) System.out.println();;
        }
    }
    public static float oklabR2Color(int index)
    {
        index += SEED;
        float L = ((0x9E3779B97F4A7C15L * index >>> 41) * 0x1p-23f + 0.6f) % 1f;
        float A = ((0xC13FA9A902A6328FL * index >>> 41) * 0x1p-23f + 0.5f) % 1f * 0.6f + 0.2f;
        float B = ((0x91E10DA5C79E7B1DL * index >>> 41) * 0x1p-23f + 0.5f) % 1f * 0.6f + 0.2f;

        return ColorTools.oklab(L, A, B, 1f);
    }
}
