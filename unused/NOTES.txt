Late October 2021
In release 0.6.1, the oklabSaturation() method is just wrong. But, so are chromaLimit() and maybe chroma(). I really
have no idea what's happening, but the saturation is exceeding 1.0 by a significant factor, and mostly for blue or
nearby colors. I noticed this while in the middle of a change to how lightness is handled, but the issue predates that
(back to 0.6.1 at least). There's another issue where 0.6.1 only produces colors with a lower chroma than they should
have, and working around that isn't too hard (it involves removing some `* 0.5` and changing `0x1p-18` to `0x1p-16`).
I think the way the gamut is generated probably has some bug in it. For example, pure blue (0x0000FFFF) claims a
chroma of 0.31835338, and a chroma limit of 0.22460938 (or 0.16016015 in a case with different lightness). The chroma
seems accurate for the reported A and B channels, so the limit is much too small.

November 6, 2021
This saturation/chroma-limit bug seems to be fixed now. I had to re-generate the gamut data using a different inGamut()
check, one that permits the same amount of room for error as our 8-bit channels in ColorTools. The above-mentioned
changes relating to `* 0.5` almost all apply still without changes. Lightness needed to be adjusted in the gamut in the
same way it was adjusted in toRGBA conversions. There still needs to be some tolerance for error in chroma calculations;
this is currently about 2/255, and it doesn't seem to need changing yet.

November 17, 2021
NOPE. Not fixed. ColorTools.oklabSaturation() seems very broken for some colors (mostly green and blue), and fine for
others (mostly reddish). Working on this, I found the inGamut() used by GamutWriter seems to expect colors mapped to the
-0.5 to 0.5 range for A and B (matching most of the rest of the library). It also needed some tweaks to avoid receiving
L values of 1.0 (or similarly very high values); this can be done in reverseLight(). I'm going to try remaking the gamut
again; hopefully things will work this time.

November 18, 2021
YES...? It seems fixed now that I tracked down a major bug. Some shown chroma limit and raw gamut info used hue() when
it should have used oklabHue(), and that threw off the gamut a lot. Colors appear fully saturated when they should be,
and saturation stays between 0 and 1.0.

November 26, 2021
Still working, as far as I can tell. The limitToGamut() methods and some other places used too much distance and passed
the edge of the gamut, but this was easy to fix by going back to halving the raw gamut value in those. If that bug is
present anywhere else, it can be spotted by checking pure blue; if it appears too purple, then the bug is likely there.
